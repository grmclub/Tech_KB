The more I learn, the more I realize how much I don’t know. — Albert Einstein

-------------------------------------------------------------
* Linus Torvalds on software engg

What I think Linus meant, and what developers who have “good taste” do differently, is that they take the time to conceptualize what they are building before they start. They define the boundaries of the components they are working with, and how they interact with each other. They try to ensure everything fits well together, and that execution flows elegantly.


To the best of my ability to discern, the crux of the “good taste” requirement is the elimination of edge cases, which tend to reveal themselves as conditional statements. The fewer conditions you test for, the better your code “tastes”.

What I think Linus meant, and what developers who have “good taste” do differently, is that they take the time to conceptualize what they are building before they start. They define the boundaries of the components they are working with, and how they interact with each other. They try to ensure everything fits well together, and that execution flows elegantly.

-------------------------------------------------------------
The Dreyfus Model fundamentals are summarized here.

1. Novice - Needs to be told exactly what to do. Very little context to base decisions off of.

2. Advanced beginner - Has more context for decisions, but still needs rigid guidelines to follow.

3. Competent - Begins to question the reasoning behind the tasks, and can see longer term consequences.

4. Proficient - Still relies on rules, but able to seperate what is most important.

5. Expert - Works mainly on intuition, except in circumstances where problems occur

http://stackoverflow.com/questions/336400/how-can-i-use-the-dreyfus-model-of-skill-acquisition
-------------------------------------------------------------
* App Design Levels
====================
  
01. String/ Array/ Api call (split, join, len, substr, replace) / (strlen, strcat, strcpy, strcmp, strstr)
    Containers(array, list, dict) : search, sort, iterate + map, reduce, filter

02. DB I/O 
    - CRUD(create,retrieve,update,delete)

03. Socket Programming, Async IO, Multithreading
    - I/O strategy (non-blocking, multiplexed, memory_mapped, scatter_gather)

04. Application Server design
    -protocols, api
    -patterns
    -data structures
    -Failover Clustering	

05. Distributed System design
    - Message Passing
	- Distributed transaction journal
    - Distributed Failover


-------------------------------------------------------------
Layers of the enterprise architecture(TOGAF)
============================================
1. Business architecture or business process architecture which defines the business strategy, governance,
   organization, and key business processes of the organization

2. Applications architecture which provides a blueprint for the individual application systems to be deployed,
   the interactions between the application systems, and their relationships to the 
   core business  processes of the organization with the frameworks for services to 
   be exposed as business functions for integration.

3. Data architecture which describes the structure of an organization's logical and physical data assets 
   and the associated data management resources.

4. Technology architecture or technology architecture which describes the hardware, software and network infrastructure
   needed to support the deployment of core, mission-critical applications
              
              
-------------------------------------------------------------

-------------------------------------------------------------
